/** *****************************************************************************************************************
 * Threads:
 *  PMainSystem;
 *  PCmd
********************************************************************************************************************/

#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <signal.h>

#include <string.h>
#include <future>

#include "cmd.h"
using namespace std;


// -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
// Signal:
#define SIGTX 44
#define REGISTER_UAPP _IO('R', 'g')

// Device Driver:
#define UART_FILE "/dev/cmdfile"
#define LED_FILE  "/dev/ledfile"

int fuart;      // uart file 
int fleds;      // gpio file

// -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

// ==================================================================================================================
// ==================================================================================================================
/**
 * CALLBACKS
*/
// Signals:
void signalhandler (int sig){
  
    printf("\n\nReceived signal\n");
  //  flag_sig = 1;
}

// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================
/**
 * ERROR Condition thread: PERROR
*/
string PError(){
    string err_msg;

    return err_msg;
}
// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================
/**
 * CMD Thread: PERROR
*/


// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================

// ==================================================================================================================
// ==================================================================================================================
/**
 * Main Thread: Close Functions:
*/
void closeUartDD(){
        close(fuart);
        system("rmmod /dev/uartmodule");        // removes the DD 
        system("rm /dev/uartmodule.ko");        // deletes the .ko file
}
void closeLedDD(){
        close(fleds);
        system("rmmod /dev/gpiomodule");        // removes the DD 
        system("rm /dev/gpiomodule.ko");        // deletes the .ko file
}
void closeServer(){

}
void closeI2C(){
    
}
//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---
//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---
/**
 * Main Thread: Init Busit
*/

bool initBusit(){

    /* Device Drivers */
        // Uart
/*        system("scp uartmodule.ko /dev/");          // copies the .ko to the /dev/
        system("chmod 666 /dev/uartmodule.ko");     // all users can read and write but cannot execute the file
        system("insmod /dev/uartmodule.ko");        // insert the DD
        fuart = open(UART_FILE, O_RDONLY);          // opens only to read 
        if (fuart < 0)  {goto DD_UART_INIT_ERROR;}  // fails to open the file
*/
        // GPIO - leds
/*        system("scp gpiomodule.ko /dev/");          // copies the .ko to the /dev/
        system("chmod 666 /dev/gpiomodule.ko");     // all users can read and write but cannot execute the file
        system("insmod /dev/gpiomodule.ko");        // insert the DD
        fleds = open(LED_FILE, O_WRONLY);           // opens only to write
        if (fleds < 0)  {goto DD_GPIO_INIT_ERROR;}  // fails to open the file
*/
    /* Server */
    
    /* I2C */


    /* Signal */
        signal(SIGTX, signalhandler);
        printf("Signal PID: %d\n", getpid());

    /* Threads */
        if (initCmd())
            return true;

I2C_INIT_ERROR:
    closeI2C();
SERVER_INIT_ERROR:
    closeServer();
DD_GPIO_INIT_ERROR:
    closeLedDD();
DD_UART_INIT_ERROR:
    closeUartDD();
    
    return false;
}

//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---
//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---
/**
 * Main Thread: MainSystem
*/
void MainSystem(){

}
//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---
//  ---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---__---

int main(){
//  - - - - - - - - - - - - - - - - - - - - - -
// Open Condition:
    if (initBusit())
//  - - - - - - - - - - - - - - - - - - - - - -
        // Main Sys Thread (main)
        MainSystem();
//  - - - - - - - - - - - - - - - - - - - - - -
// Close Condition:
    
    /* Device Drivers */
        // Uart            
        closeUartDD();
        
        // GPIO - leds
        closeLedDD();

//  - - - - - - - - - - - - - - - - - - - - - -
    return 0;
}

